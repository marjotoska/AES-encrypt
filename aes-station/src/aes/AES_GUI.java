package aes;

import java.awt.Color;

/**
 *
 * @author Agjelos Hashani
 */
public class AES_GUI extends javax.swing.JFrame {

    /**
     * Creates new form aes
     */
    public AES_GUI() {
        
        initComponents();
        setSize(461, 690);
        setResizable(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        mode = new javax.swing.ButtonGroup();
        keySize = new javax.swing.ButtonGroup();
        jDecrypt = new javax.swing.JButton();
        jEncrypt = new javax.swing.JButton();
        j128 = new javax.swing.JRadioButton();
        j192 = new javax.swing.JRadioButton();
        j256 = new javax.swing.JRadioButton();
        jECB = new javax.swing.JRadioButton();
        jCBC = new javax.swing.JRadioButton();
        jMessage = new javax.swing.JTextField();
        jKey = new javax.swing.JTextField();
        jIV = new javax.swing.JTextField();
        jOutput = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        jButton1.setText("jButton1");

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/aes/AES.jpg"))); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jDecrypt.setText("Decrypt");
        jDecrypt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jDecryptMouseClicked(evt);
            }
        });
        getContentPane().add(jDecrypt);
        jDecrypt.setBounds(310, 610, 74, 30);

        jEncrypt.setText("Encrypt");
        jEncrypt.setBorder(new javax.swing.border.MatteBorder(null));
        jEncrypt.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jEncrypt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jEncryptMouseClicked(evt);
            }
        });
        getContentPane().add(jEncrypt);
        jEncrypt.setBounds(80, 610, 90, 30);

        j128.setBackground(new java.awt.Color(249, 207, 79));
        keySize.add(j128);
        j128.setContentAreaFilled(false);
        getContentPane().add(j128);
        j128.setBounds(140, 180, 30, 30);

        j192.setBackground(new java.awt.Color(249, 207, 79));
        keySize.add(j192);
        j192.setContentAreaFilled(false);
        j192.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                j192ActionPerformed(evt);
            }
        });
        getContentPane().add(j192);
        j192.setBounds(260, 180, 30, 28);

        j256.setBackground(new java.awt.Color(249, 207, 79));
        keySize.add(j256);
        j256.setContentAreaFilled(false);
        j256.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                j256ActionPerformed(evt);
            }
        });
        getContentPane().add(j256);
        j256.setBounds(380, 180, 30, 30);

        jECB.setBackground(new java.awt.Color(138, 190, 242));
        mode.add(jECB);
        jECB.setForeground(new java.awt.Color(138, 190, 242));
        jECB.setContentAreaFilled(false);
        jECB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jECBMouseClicked(evt);
            }
        });
        getContentPane().add(jECB);
        jECB.setBounds(170, 120, 30, 30);

        jCBC.setBackground(new java.awt.Color(101, 255, 101));
        mode.add(jCBC);
        jCBC.setForeground(new java.awt.Color(101, 255, 101));
        jCBC.setContentAreaFilled(false);
        jCBC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCBCMouseClicked(evt);
            }
        });
        getContentPane().add(jCBC);
        jCBC.setBounds(340, 120, 30, 30);

        jMessage.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jMessage.setText("Input Message");
        jMessage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMessageMouseClicked(evt);
            }
        });
        jMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMessageActionPerformed(evt);
            }
        });
        getContentPane().add(jMessage);
        jMessage.setBounds(140, 270, 300, 50);

        jKey.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jKey.setText("Input Key");
        jKey.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jKeyMouseClicked(evt);
            }
        });
        jKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jKeyActionPerformed(evt);
            }
        });
        getContentPane().add(jKey);
        jKey.setBounds(140, 350, 300, 50);

        jIV.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jIV.setText("Input IV");
        jIV.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jIVMouseClicked(evt);
            }
        });
        jIV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jIVActionPerformed(evt);
            }
        });
        getContentPane().add(jIV);
        jIV.setBounds(140, 450, 300, 50);

        jOutput.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        getContentPane().add(jOutput);
        jOutput.setBounds(140, 530, 300, 50);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/aes/AES.jpg"))); // NOI18N
        jLabel2.setText("jLabel2");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(0, 0, 460, 650);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void j256ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_j256ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_j256ActionPerformed

    private void j192ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_j192ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_j192ActionPerformed

    private void jMessageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMessageMouseClicked
    }//GEN-LAST:event_jMessageMouseClicked

    private void jMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMessageActionPerformed
      
    }//GEN-LAST:event_jMessageActionPerformed

    private void jKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jKeyActionPerformed
        
    }//GEN-LAST:event_jKeyActionPerformed

    private void jKeyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jKeyMouseClicked
    }//GEN-LAST:event_jKeyMouseClicked

    private void jIVMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jIVMouseClicked
       
    }//GEN-LAST:event_jIVMouseClicked


    
    private void jEncryptMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jEncryptMouseClicked
        int mode = getMode();
        int keySize = getKey();
        
        String message = jMessage.getText();
        String iv = jIV.getText();
        int[] key;
        
        if (mode == 1 && keySize == 128){
            ECB128 aes = new ECB128();
            key = aes.KeySchedule(AES.hex2int(jKey.getText()));
            jOutput.setText(aes.encryptRoutine(AES.hex2Integer(message), key, true));
        }
            
        else if (mode == 1 && keySize == 192){
            ECB192 aes = new ECB192();
            key = aes.KeySchedule(AES.hex2int(jKey.getText()));
            jOutput.setText(aes.encryptRoutine(AES.hex2Integer(message), key, true));
        }
            
        else if (mode == 1 && keySize == 256){
            ECB256 aes = new ECB256();
            key = aes.KeySchedule(AES.hex2int(jKey.getText()));
            jOutput.setText(aes.encryptRoutine(AES.hex2Integer(message), key, true));
        }
            
        else if (mode == 2 && keySize == 128){
            CBC128 aes = new CBC128();
            key = aes.KeySchedule(AES.hex2int(jKey.getText()));
            jOutput.setText(aes.encryptRoutine(AES.hex2Integer(message), key, AES.hex2int(iv), true));
        }
            
        else if (mode == 2 && keySize == 192){
            CBC192 aes = new CBC192();
            key = aes.KeySchedule(AES.hex2int(jKey.getText()));
            jOutput.setText(aes.encryptRoutine(AES.hex2Integer(message), key, AES.hex2int(iv), true));
        }
            
        else if (mode == 2 && keySize == 256){
            CBC256 aes = new CBC256();
            key = aes.KeySchedule(AES.hex2int(jKey.getText()));
            jOutput.setText(aes.encryptRoutine(AES.hex2Integer(message), key, AES.hex2int(iv), true));
        }
    }//GEN-LAST:event_jEncryptMouseClicked

    private void jCBCMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCBCMouseClicked
        if (jCBC.isSelected()){
            jIV.setEditable(true);
            jIV.setBackground(Color.white);
            jIV.setText("Input IV");
        }
    }//GEN-LAST:event_jCBCMouseClicked

    private void jECBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jECBMouseClicked
        if (jECB.isSelected()){
            jIV.setBackground(Color.gray);
            jIV.setText("ECB Mode has no IV");
            jIV.setEditable(false);
        }
    }//GEN-LAST:event_jECBMouseClicked

    private void jIVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jIVActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jIVActionPerformed

    private void jDecryptMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jDecryptMouseClicked
        int mode = getMode();
        int keySize = getKey();
        
        String message = jMessage.getText();
        String iv = jIV.getText();
        int[] key;
        
        if (mode == 1 && keySize == 128){
            ECB128 aes = new ECB128();
            key = aes.KeySchedule(AES.hex2int(jKey.getText()));
            jOutput.setText(aes.decryptRoutine(AES.hex2int(message), key, true));
        }
            
        else if (mode == 1 && keySize == 192){
            ECB192 aes = new ECB192();
            key = aes.KeySchedule(AES.hex2int(jKey.getText()));
            jOutput.setText(aes.decryptRoutine(AES.hex2int(message), key, true));
        }
            
        else if (mode == 1 && keySize == 256){
            ECB256 aes = new ECB256();
            key = aes.KeySchedule(AES.hex2int(jKey.getText()));
            jOutput.setText(aes.decryptRoutine(AES.hex2int(message), key, true));
        }
            
        else if (mode == 2 && keySize == 128){
            CBC128 aes = new CBC128();
            key = aes.KeySchedule(AES.hex2int(jKey.getText()));
            jOutput.setText(aes.decryptRoutine(AES.hex2Integer(message), key, AES.hex2int(iv), true));
        }
            
        else if (mode == 2 && keySize == 192){
            CBC192 aes = new CBC192();
            key = aes.KeySchedule(AES.hex2int(jKey.getText()));
            jOutput.setText(aes.decryptRoutine(AES.hex2Integer(message), key, AES.hex2int(iv), true));
        }
            
        else if (mode == 2 && keySize == 256){
            CBC256 aes = new CBC256();
            key = aes.KeySchedule(AES.hex2int(jKey.getText()));
            jOutput.setText(aes.decryptRoutine(AES.hex2Integer(message), key, AES.hex2int(iv), true));
        }
    }//GEN-LAST:event_jDecryptMouseClicked
private void jLabe21ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }                                        
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AES_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AES_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AES_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AES_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AES_GUI().setVisible(true);
            }
        });
               
        
    }
    
    public int getMode(){
        if (jCBC.isSelected())
            return 2;
        else if(jECB.isSelected())
            return 1;
        return 0;
    }
    
    public int getKey(){
        if (j128.isSelected())
            return 128;
        else if(j192.isSelected())
            return 192;
        else if(j256.isSelected())
            return 256;
        return 0;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton j128;
    private javax.swing.JRadioButton j192;
    private javax.swing.JRadioButton j256;
    private javax.swing.JButton jButton1;
    private javax.swing.JRadioButton jCBC;
    private javax.swing.JButton jDecrypt;
    private javax.swing.JRadioButton jECB;
    private javax.swing.JButton jEncrypt;
    private javax.swing.JTextField jIV;
    private javax.swing.JTextField jKey;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField jMessage;
    private javax.swing.JTextField jOutput;
    private javax.swing.ButtonGroup keySize;
    private javax.swing.ButtonGroup mode;
    // End of variables declaration//GEN-END:variables
}
